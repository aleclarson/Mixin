// Generated by CoffeeScript 1.11.1
var assertType, cloneArgs, createMethod, frozen, isDev;

frozen = require("Property").frozen;

assertType = require("assertType");

cloneArgs = require("cloneArgs");

isDev = require("isDev");

exports.create = function(config) {
  var i, key, len, methods, mixinType, prototype, value;
  isDev && assertType(config, Object);
  prototype = {};
  if (Array.isArray((methods = config.methods))) {
    for (i = 0, len = methods.length; i < len; i++) {
      key = methods[i];
      prototype[key] = createMethod(key);
    }
  }
  if (config["extends"] && (methods = config["extends"].prototype)) {
    for (key in methods) {
      value = methods[key];
      if (prototype[key] !== void 0) {
        continue;
      }
      if (typeof value !== "function") {
        continue;
      }
      prototype[key] = createMethod(key);
    }
  }
  mixinType = function() {
    var calls, mixin;
    mixin = Object.create(prototype);
    calls = [];
    mixin.apply = function(type) {
      var args, j, len1, method, ref;
      for (j = 0, len1 = calls.length; j < len1; j++) {
        ref = calls[j], key = ref.key, args = ref.args;
        method = type[key];
        if (isDev && !method) {
          throw Error("Mixin expected method to exist: '" + key + "'");
        }
        method.apply(type, args);
      }
    };
    frozen.define(mixin, "_calls", {
      value: calls
    });
    return mixin;
  };
  mixinType.prototype = prototype;
  return mixinType;
};

createMethod = function(key) {
  return function() {
    var args;
    args = cloneArgs(arguments);
    this._calls.push({
      key: key,
      args: args
    });
  };
};
